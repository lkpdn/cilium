// Code generated by go-swagger; DO NOT EDIT.

package endpoint

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/cilium/cilium/api/v1/models"
)

// PostEndpointCreatedCode is the HTTP code returned for type PostEndpointCreated
const PostEndpointCreatedCode int = 201

/*PostEndpointCreated Created

swagger:response postEndpointCreated
*/
type PostEndpointCreated struct {

	/*
	  In: Body
	*/
	Payload int64 `json:"body,omitempty"`
}

// NewPostEndpointCreated creates PostEndpointCreated with default headers values
func NewPostEndpointCreated() *PostEndpointCreated {
	return &PostEndpointCreated{}
}

// WithPayload adds the payload to the post endpoint created response
func (o *PostEndpointCreated) WithPayload(payload int64) *PostEndpointCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post endpoint created response
func (o *PostEndpointCreated) SetPayload(payload int64) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostEndpointCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// PostEndpointInvalidCode is the HTTP code returned for type PostEndpointInvalid
const PostEndpointInvalidCode int = 400

/*PostEndpointInvalid Invalid endpoint in request

swagger:response postEndpointInvalid
*/
type PostEndpointInvalid struct {

	/*
	  In: Body
	*/
	Payload models.Error `json:"body,omitempty"`
}

// NewPostEndpointInvalid creates PostEndpointInvalid with default headers values
func NewPostEndpointInvalid() *PostEndpointInvalid {
	return &PostEndpointInvalid{}
}

// WithPayload adds the payload to the post endpoint invalid response
func (o *PostEndpointInvalid) WithPayload(payload models.Error) *PostEndpointInvalid {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post endpoint invalid response
func (o *PostEndpointInvalid) SetPayload(payload models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostEndpointInvalid) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// PostEndpointExistsCode is the HTTP code returned for type PostEndpointExists
const PostEndpointExistsCode int = 409

/*PostEndpointExists Endpoint already exists

swagger:response postEndpointExists
*/
type PostEndpointExists struct {
}

// NewPostEndpointExists creates PostEndpointExists with default headers values
func NewPostEndpointExists() *PostEndpointExists {
	return &PostEndpointExists{}
}

// WriteResponse to the client
func (o *PostEndpointExists) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
}

// PostEndpointFailedCode is the HTTP code returned for type PostEndpointFailed
const PostEndpointFailedCode int = 500

/*PostEndpointFailed Endpoint creation failed

swagger:response postEndpointFailed
*/
type PostEndpointFailed struct {

	/*
	  In: Body
	*/
	Payload models.Error `json:"body,omitempty"`
}

// NewPostEndpointFailed creates PostEndpointFailed with default headers values
func NewPostEndpointFailed() *PostEndpointFailed {
	return &PostEndpointFailed{}
}

// WithPayload adds the payload to the post endpoint failed response
func (o *PostEndpointFailed) WithPayload(payload models.Error) *PostEndpointFailed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post endpoint failed response
func (o *PostEndpointFailed) SetPayload(payload models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostEndpointFailed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
