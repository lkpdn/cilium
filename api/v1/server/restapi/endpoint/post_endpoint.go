// Code generated by go-swagger; DO NOT EDIT.

package endpoint

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostEndpointHandlerFunc turns a function with the right signature into a post endpoint handler
type PostEndpointHandlerFunc func(PostEndpointParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostEndpointHandlerFunc) Handle(params PostEndpointParams) middleware.Responder {
	return fn(params)
}

// PostEndpointHandler interface for that can handle valid post endpoint params
type PostEndpointHandler interface {
	Handle(PostEndpointParams) middleware.Responder
}

// NewPostEndpoint creates a new http.Handler for the post endpoint operation
func NewPostEndpoint(ctx *middleware.Context, handler PostEndpointHandler) *PostEndpoint {
	return &PostEndpoint{Context: ctx, Handler: handler}
}

/*PostEndpoint swagger:route POST /endpoint endpoint postEndpoint

Create endpoint

Creates a new endpoint and returns the endpoint ID for the created
endpoint.


*/
type PostEndpoint struct {
	Context *middleware.Context
	Handler PostEndpointHandler
}

func (o *PostEndpoint) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostEndpointParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
