// Code generated by go-swagger; DO NOT EDIT.

package endpoint

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/cilium/cilium/api/v1/models"
)

// PostEndpointReader is a Reader for the PostEndpoint structure.
type PostEndpointReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostEndpointReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewPostEndpointCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPostEndpointInvalid()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewPostEndpointExists()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewPostEndpointFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostEndpointCreated creates a PostEndpointCreated with default headers values
func NewPostEndpointCreated() *PostEndpointCreated {
	return &PostEndpointCreated{}
}

/*PostEndpointCreated handles this case with default header values.

Created
*/
type PostEndpointCreated struct {
	Payload int64
}

func (o *PostEndpointCreated) Error() string {
	return fmt.Sprintf("[POST /endpoint][%d] postEndpointCreated  %+v", 201, o.Payload)
}

func (o *PostEndpointCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostEndpointInvalid creates a PostEndpointInvalid with default headers values
func NewPostEndpointInvalid() *PostEndpointInvalid {
	return &PostEndpointInvalid{}
}

/*PostEndpointInvalid handles this case with default header values.

Invalid endpoint in request
*/
type PostEndpointInvalid struct {
	Payload models.Error
}

func (o *PostEndpointInvalid) Error() string {
	return fmt.Sprintf("[POST /endpoint][%d] postEndpointInvalid  %+v", 400, o.Payload)
}

func (o *PostEndpointInvalid) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostEndpointExists creates a PostEndpointExists with default headers values
func NewPostEndpointExists() *PostEndpointExists {
	return &PostEndpointExists{}
}

/*PostEndpointExists handles this case with default header values.

Endpoint already exists
*/
type PostEndpointExists struct {
}

func (o *PostEndpointExists) Error() string {
	return fmt.Sprintf("[POST /endpoint][%d] postEndpointExists ", 409)
}

func (o *PostEndpointExists) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostEndpointFailed creates a PostEndpointFailed with default headers values
func NewPostEndpointFailed() *PostEndpointFailed {
	return &PostEndpointFailed{}
}

/*PostEndpointFailed handles this case with default header values.

Endpoint creation failed
*/
type PostEndpointFailed struct {
	Payload models.Error
}

func (o *PostEndpointFailed) Error() string {
	return fmt.Sprintf("[POST /endpoint][%d] postEndpointFailed  %+v", 500, o.Payload)
}

func (o *PostEndpointFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
